<?php
  
  /**
   * Implements hook_help().
   *
   * Displays help and module information.
   */
  function github_commits_help($path, $arg) {
    switch ($path) {
      case "admin/help#github_commits":
        return '<p>' . t("Displays current Git-commits from a GitHub-repository.") . '</p>';
      break;
    }
  }


  /**
   * Implements hook_block_info().
   * 
   * Defines the module as a block module.
   */
  function github_commits_block_info() {
    $blocks['github_commits'] = array(
      'info' => t('GitHub Commits'),
      'cache' => DRUPAL_CACHE_PER_ROLE,
    );
    return $blocks;
  }


  /**
   * Implements hook_menu().
   */
  function github_commits_menu() {
    $items = array();

    $items['admin/config/content/github_commits'] = array(
      'title' => 'GitHub Commits',
      'description' => 'Configuration for GitHub Commits module',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('github_commits_form'),
      'access arguments' => array('access administration pages'),
      'type' => MENU_NORMAL_ITEM,
    );
    // $items['current_posts'] = array(
    //   'title' => 'Current posts',
    //   'page callback' => '_current_posts_page',
    //   'access arguments' => array('access current_posts content'),
    //   'type' => MENU_NORMAL_ITEM, //Will appear in Navigation menu.
    // );

    return $items;
  }


  /**
   * Get commits from API with cURL
   */
  function get_api_content() {
    $items = array();

    if (user_access('access content')) {

      // User input
      // $sshCloneUrl = 'git@github.com:LarsEliasNielsen/github_commits.git';
      // $numberOfCommits = 5;
      $sshCloneUrl = variable_get('clone_url', 'git@github.com:LarsEliasNielsen/github_commits.git');
      $numberOfCommits = variable_get('commit_number', 5);
      $timestampFormat = variable_get('timestamp_format', 'm-d-Y H:i:s');

      $userPattern = array('/^git@github.com:/', '/\/[A-Za-z0-9\_\-]+.git$/');
      $repoPattern = array('/^git@github.com:[A-Za-z0-9\_\-]+\//', '/.git$/');

      // User and repo from clone url
      $user = preg_replace($userPattern, '', $sshCloneUrl);
      $repo = preg_replace($repoPattern, '', $sshCloneUrl);

      // cURL the API
      // CURLOPT_USERPWN is used if repo is private, CAUTION
      $curl = curl_init();
      curl_setopt_array($curl, array(
        CURLOPT_RETURNTRANSFER => 1,
        CURLOPT_URL => 'https://api.github.com/repos/'.$user.'/'.$repo.'/commits',
        CURLOPT_USERAGENT => $numberOfCommits.' latest commits',
        // CURLOPT_USERPWD => 'USER:PASS'
      ));
      
      $result = curl_exec($curl);

      curl_close($curl);

      $json = json_decode($result, true);

      $count = 0;

      foreach ($json as $key => $val) {
        
        $commitMessage = l($json[$key]['commit']['message'], $json[$key]['html_url']);
        $committer = l($json[$key]['author']['login'], $json[$key]['author']['html_url']);
        $commitRawDate = $json[$key]['commit']['author']['date'];
        $commitDate = date($timestampFormat, strtotime($commitRawDate));

        // Place API content
        $items[] = array(
          'data' => '['.$commitDate.'] '.$commitMessage.' by '.$committer,
        );

        // If there is no commits
        if (empty($items)) {
          $items[] = array(
            'data' => 'No commits available',
          );
        }

        $count++;
        // Limit loop to a number of commits
        if ($count >= $numberOfCommits) {
          // If list is longer, print link to all commits
          $items[] = array(
            'data' => l('See full list of commits', '#'),
            'id' => 'full_list',
          );
          break;
        }

      }

    } else {

      // Access content denied
      $items[] = array(
        'data' => t('You don\'t have access to the content'),
      );

    }

    return $items;
  }


  /**
   * Implements hook_block_view().
   */
  function github_commits_block_view($delta = '') {
    $block = array();

    switch($delta) {
      case 'github_commits':
        
        // List attributes
        $attributes = array(
          'id' => 'someId',
          'class' => 'someClass',
        );

        // Set block title
        $block['subject'] = t('GitHub Commits');

        // Get content from API
        $items = get_api_content();

        // Print list
        $block['content'] = theme('item_list', array(
          'items' => $items,
          'type' => 'ul',
          'attributes' => $attributes,
        ));
        
        return $block;
    }
  }


  /**
   * Page callback: Current posts settings
   *
   * @see current_posts_menu()
   */
  function github_commits_form($form, &$form_state) {
    $form['clone_url'] = array(
      '#type' => 'textfield',
      '#title' => t('Repositorys clone URL'),
      '#default_value' => variable_get('clone_url', 'git@github.com:LarsEliasNielsen/github_commits.git'),
      '#size' => 50,
      '#maxlength' => 264,
      '#description' => t('The clone URL contains the creator and repository.'),
      '#required' => TRUE,
    );
    $form['commit_number'] = array(
      '#type' => 'textfield',
      '#title' => t('Commit number'),
      '#default_value' => variable_get('commit_number', 5),
      '#number_type' => 'integer',
      '#size' => 1,
      '#maxlength' => 2,
      '#description' => t('The number of commit messages to display.'),
      '#required' => TRUE,
    );
    $form['timestamp_format'] = array(
      '#type' => 'select',
      '#title' => t('Timestamp format'),
      '#default_value' => variable_get('timestamp_format', 'm-d-Y H:i:s'),
      '#options' => array(
        'm-d-Y H:i:s' => 'm-d-Y H:i:s',
        'd-m-Y H:i:s' => 'd-m-Y H:i:s',
        'm-d-Y H:i' => 'm-d-Y H:i',
        'd-m-Y H:i' => 'd-m-Y H:i',
        'm-d-Y' => 'm-d-Y',
        'd-m-Y' => 'd-m-Y',
      ),
      '#description' => t('Choose the format of the timestamp on each commit.'),
    );

    return system_settings_form($form);
  }